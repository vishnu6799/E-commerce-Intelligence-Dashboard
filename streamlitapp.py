# -*- coding: utf-8 -*-
"""streamlitapp (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/196gJBBsUaXdG8XbkXBEGf7-8d54Tw7k
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler

# --- Feature Engineering Function for Classifier and Clustering ---
def create_classifier_features(df):
    """
    Creates the necessary features for the classifier and clustering models
    from the raw data.
    """
    required_cols = ['session_id', 'order', 'page', 'page1_main_category']
    if not all(col in df.columns for col in required_cols):
        return None, "Required columns are missing from the uploaded CSV."

    df = df.sort_values(['session_id', 'order'])

    session_length = df.groupby('session_id')['order'].count().rename('session_length')
    unique_pages = df.groupby('session_id')['page'].nunique().rename('unique_pages')
    first_category = df.groupby('session_id')['page1_main_category'].first().rename('first_clicked_category')
    last_category = df.groupby('session_id')['page1_main_category'].last().rename('last_clicked_category')
    bounce_flag = session_length.apply(lambda x: 1 if x == 1 else 0).rename('is_bounce')
    exit_page = df.groupby('session_id')['page'].last().rename('exit_page')

    session_features = pd.concat([
        session_length,
        unique_pages,
        first_category,
        last_category,
        bounce_flag,
        exit_page,
    ], axis=1).reset_index()

    return session_features, None

# --- Load models and preprocessor ---
@st.cache_resource
def load_models():
    reg_model = joblib.load("xgb_model.pkl")
    clf_model = joblib.load("best_classifier_model.pkl")
    cluster_model = joblib.load("clustering_model.pkl")
    try:
        preprocessor = joblib.load("preprocessor.pkl")
    except FileNotFoundError:
        st.error("Preprocessor file 'preprocessor.pkl' not found. Please run the training script first.")
        preprocessor = None
    return reg_model, clf_model, cluster_model, preprocessor

reg_model, clf_model, cluster_model, preprocessor = load_models()

# Define the columns for the regression model
reg_train_columns = ['year', 'month', 'day', 'order', 'country', 'page1_main_category', 'colour', 'location', 'model_photography', 'page']

# Define the columns for the clustering model
cluster_train_columns = ['order', 'page1_main_category', 'colour', 'location', 'model_photography', 'price', 'price_2', 'page']

st.title("E-commerce Intelligence Dashboard")

# --- File uploader or manual entry ---
data_source = st.radio("Choose input type:", ["Upload CSV", "Manual Entry"])

df_input = None
if data_source == "Upload CSV":
    uploaded_file = st.file_uploader("Upload your input CSV file", type=["csv"])
    if uploaded_file:
        df_input = pd.read_csv(uploaded_file)
else:
    st.subheader("Manual Input")
    st.warning("Manual input is not suitable for the Classifier and Clustering models, as they require session-based features. Only the Regression model prediction will work.")
    input_dict = {
        'year': st.number_input("Year", min_value=2000, max_value=2050, value=2025),
        'month': st.number_input("Month", min_value=1, max_value=12, value=8),
        'day': st.number_input("Day", min_value=1, max_value=31, value=9),
        'order': st.number_input("Order", min_value=0, value=1),
        'country': st.number_input("Country", min_value=0, value=1),
        'page1_main_category': st.number_input("Page 1 Main Category", min_value=0, value=1),
        'colour': st.number_input("Colour", min_value=0, value=1),
        'location': st.number_input("Location", min_value=0, value=1),
        'model_photography': st.number_input("Model Photography", min_value=0, value=1),
        'page': st.number_input("Page", min_value=0, value=1),
    }
    df_input = pd.DataFrame([input_dict])

# --- Process and show predictions ---
if df_input is not None and preprocessor is not None:
    st.write("### Input Data")
    st.dataframe(df_input)

    try:
        # --- Regression Prediction ---
        st.subheader("ðŸ§® Revenue Estimation")
        reg_input_data = df_input.reindex(columns=reg_train_columns, fill_value=0)
        reg_input_data = reg_input_data.apply(pd.to_numeric, errors='coerce')
        reg_pred = reg_model.predict(reg_input_data)
        st.write("Estimated Revenue:", reg_pred[0])

        # --- Classification and Clustering Predictions (for CSV input only) ---
        if data_source == "Upload CSV":
            # Classification Prediction
            st.subheader("ðŸŽ¯ Conversion Prediction")
            classifier_features_df, error_message = create_classifier_features(df_input)

            if classifier_features_df is not None:
                X_clf_cluster = classifier_features_df.drop('session_id', axis=1)
                X_clf_cluster = X_clf_cluster.apply(pd.to_numeric, errors='coerce')

                class_pred = clf_model.predict(X_clf_cluster)
                class_pred_display = int(class_pred[0])
                st.write("Conversion Likely:" if class_pred_display == 1 else "Not Likely")
            else:
                st.warning(error_message)

            # Clustering Prediction
            st.subheader("ðŸ‘¥ Customer Segmentation")
            cluster_input_data = df_input.reindex(columns=cluster_train_columns, fill_value=0)
            cluster_input_data = cluster_input_data.apply(pd.to_numeric, errors='coerce')

            cluster_label = cluster_model.predict(cluster_input_data)
            cluster_label_display = int(cluster_label[0])
            st.write(f"Assigned Cluster: {cluster_label_display}")

        # --- Visualizations (CSV only) ---
        if data_source == "Upload CSV":
            st.subheader("ðŸ“Š Data Visualizations")
            
            # Use a selectbox to let the user choose which plot to display
            plot_choice = st.selectbox(
                "Choose a plot to display:",
                ["None", "Clothing Colour Preferences", "Click Position on Page", 
                 "Model Photography Type", "Product Price Distribution", 
                 "Main Product Category Distribution"]
            )

            if plot_choice == "Clothing Colour Preferences":
                fig, ax = plt.subplots()
                sns.countplot(x='colour', data=df_input, order=df_input['colour'].value_counts().index, ax=ax)
                ax.set_title('Clothing Colour Preferences')
                ax.set_xlabel('Colour Code')
                ax.set_ylabel('Count')
                st.pyplot(fig)
            
            elif plot_choice == "Click Position on Page":
                fig, ax = plt.subplots()
                sns.countplot(x='location', data=df_input, ax=ax)
                ax.set_title('Click Position on Page')
                ax.set_xlabel('Location (1-Top Left to 6-Bottom Right)')
                ax.set_ylabel('Click Count')
                st.pyplot(fig)
            
            elif plot_choice == "Model Photography Type":
                fig, ax = plt.subplots()
                sns.countplot(x='model_photography', data=df_input, ax=ax)
                ax.set_title('Model Photography Type')
                ax.set_xlabel('1 - En face, 2 - Profile')
                ax.set_ylabel('Count')
                st.pyplot(fig)

            elif plot_choice == "Product Price Distribution":
                fig, ax = plt.subplots()
                sns.histplot(df_input['price'], bins=20, kde=True, ax=ax)
                ax.set_title('Product Price Distribution')
                ax.set_xlabel('Price (Scaled)')
                ax.set_ylabel('Frequency')
                st.pyplot(fig)

            elif plot_choice == "Main Product Category Distribution":
                fig, ax = plt.subplots()
                sns.countplot(x='page1_main_category', data=df_input, ax=ax)
                ax.set_title('Main Product Category Distribution')
                ax.set_xlabel('Category (1-Trousers, 2-Skirts, 3-Blouses, 4-Sale)')
                ax.set_ylabel('Count')
                st.pyplot(fig)
                
    except Exception as e:
        st.error(f"An error occurred during prediction: {e}")
        st.warning("Please ensure your input data has the required columns and data types.")